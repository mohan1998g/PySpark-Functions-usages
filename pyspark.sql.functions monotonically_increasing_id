A column that generates monotonically increasing 64-bit integers.

The generated ID is guaranteed to be monotonically increasing and unique, but not consecutive. 
The current implementation puts the partition ID in the upper 31 bits, and the record number within each partition in the lower 33 bits. 
The assumption is that the data frame has less than 1 billion partitions, and each partition has less than 8 billion records.

Returns : Column
          last value of the group.

Notes : The function is non-deterministic because its result depends on partition IDs.

As an example, consider a DataFrame with two partitions, each with 3 records. 
This expression would return the following IDs: 0, 1, 2, 8589934592 (1L << 33), 8589934593, 8589934594.

Examples

spark.range(0, 10, 1, 2).select("id", monotonically_increasing_id()).show()

or

df.withColumn("id1", monotonically_increasing_id())

+---+-----------------------------+
| id|monotonically_increasing_id()|
+---+-----------------------------+
|  0|                            0|
|  1|                            1|
|  2|                            2|
|  3|                            3|
|  4|                            4|
|  5|                   8589934592|
|  6|                   8589934593|
|  7|                   8589934594|
|  8|                   8589934595|
|  9|                   8589934596|
+---+-----------------------------+


spark.range(0, 10, 1, 5).select("id", monotonically_increasing_id()).show()

+---+-----------------------------+
| id|monotonically_increasing_id()|
+---+-----------------------------+
|  0|                            0|
|  1|                            1|
|  2|                   8589934592|
|  3|                   8589934593|
|  4|                  17179869184|
|  5|                  17179869185|
|  6|                  25769803776|
|  7|                  25769803777|
|  8|                  34359738368|
|  9|                  34359738369|
+---+-----------------------------+


Note : spark.range(start, end, step, numPartitions)

values will come from start to end-1

if only variable is given as spark(10) then output will be 0 - 9

